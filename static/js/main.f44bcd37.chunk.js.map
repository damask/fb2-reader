{"version":3,"sources":["db.js","constants/inboxListItems.jsx","fb2Parser.js","events.js","components/BookImporter.js","components/BookList.js","components/Reader.js","App.js","serviceWorker.js","index.js"],"names":["db","key","primaryText","leftIcon","active","openedDb","openDB","upgrade","createObjectStore","keyPath","autoIncrement","createIndex","bookExists","book","count","hashHex","addSection","section","add","addElement","element","getAllBooks","getAll","then","getBook","hash","get","x","Fb2Parser","xml","this","ordinal","parentSectionId","title","querySelector","image","elements","querySelectorAll","parent","textContent","href","id","tagName","parseSection","tag","content","innerHTML","sectionId","e","bookId","body","sections","window","crypto","subtle","digest","TextEncoder","encode","buffer","Array","prototype","map","call","Uint8Array","toString","slice","join","parser","DOMParser","doc","parseFromString","description","author","annotation","imageInfo","imageHref","getAttribute","test","imageBinary","type","dispatch","detail","document","dispatchEvent","CustomEvent","on","types","do","subscription","forEach","addEventListener","BookImporter","fileInput","React","createRef","floating","primary","style","height","width","padding","onClick","current","click","onChange","event","file","target","files","reader","FileReader","a","result","parseDescription","isAlreadyAdded","Events","parseBody","console","error","readAsText","ref","BookList","props","useState","books","setBooks","setBook","useEffect","className","subtitle","avatar","src","role","expander","flat","expandable","expanded","history","push","readBook","Reader","state","topSection","match","params","getFromIndex","getAllFromIndex","children","forceUpdate","maxWidth","align","maxHeight","margin","alt","PureComponent","createBrowserHistory","App","addToast","text","action","autohide","setState","toasts","dismissToast","setPage","page","navItems","item","divider","hide","visible","renderNode","handleShow","getElementById","inboxListItems","toUpperCase","basename","aria-label","fullPage","focusOnMount","onShow","onHide","mobileDrawerType","NavigationDrawer","DrawerTypes","TEMPORARY_MINI","tabletDrawerType","PERSISTENT_MINI","desktopDrawerType","toolbarTitle","toolbarActions","icon","contentId","temporaryIcon","persistentIcon","contentClassName","path","component","from","to","onDismiss","autohideTimeout","Boolean","location","hostname","WebFontLoader","load","google","families","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.f44bcd37.chunk.js","sourcesContent":["import {openDB} from 'idb';\n\nconst BOOKS = 'books';\nconst SECTIONS = 'sections';\nconst ELEMENTS = 'elements';\n\nlet db;\n\nconst openedDb = openDB('fb2-reader', 1, {\n    upgrade(db) {\n        // Create a store of objects\n        const books = db.createObjectStore(BOOKS, {\n            keyPath: 'hashHex', autoIncrement: true\n        });\n        books.createIndex('author', 'author');\n\n        const sections = db.createObjectStore(SECTIONS, {\n            keyPath: 'id', autoIncrement: true\n        });\n        sections.createIndex('parent', 'parent');\n\n        const elements = db.createObjectStore(ELEMENTS, {\n            keyPath: ['sectionId', 'ordinal']\n        });\n        elements.createIndex('sectionId', 'sectionId');\n\n    }\n});\n\nopenedDb.then(x => db = x);\n\nexport function addBook(book) {\n    return db.add(BOOKS, book);\n}\n\nexport function bookExists(book) {\n    return db.count(BOOKS, book.hashHex);\n}\n\nexport function addSection(section) {\n    return db.add(SECTIONS, section);\n}\n\nexport function addElement(element) {\n    return db.add(ELEMENTS, element);\n}\n\nexport function getAllBooks() {\n    if (db) {\n        return db.getAll(BOOKS);\n    }\n    return openedDb.then(() => db.getAll(BOOKS));\n}\n\nexport function getBook(hash) {\n    if (db) {\n        return db.get(BOOKS, hash);\n    }\n    return openedDb.then(() => db.get(BOOKS, hash));\n}\n\nexport function getRootSection(hash) {\n    return db.getFromIndex(SECTIONS, 'parent', hash);\n}\n\nexport function getSections(parent) {\n    return db.getAllFromIndex(SECTIONS, 'parent', parent);\n}\n","import React from 'react';\nimport { FontIcon } from 'react-md';\n\nexport default [{\n  key: 'books',\n  primaryText: 'Books',\n  leftIcon: <FontIcon>book</FontIcon>,\n  active: true,\n}, {\n  key: 'read',\n  primaryText: 'Read',\n  leftIcon: <FontIcon>assignment</FontIcon>,\n},{\n  key: 'drafts',\n  primaryText: 'Drafts',\n  leftIcon: <FontIcon>drafts</FontIcon>,\n}, {\n  key: 'trash',\n  primaryText: 'Trash',\n  leftIcon: <FontIcon>delete</FontIcon>,\n}];\n","import {addSection, addElement, addBook, bookExists} from \"./db.js\";\n\nfunction buf2hex(buffer) { // buffer is an ArrayBuffer\n    return Array.prototype.map.call(new Uint8Array(buffer), x => ('00' + x.toString(16)).slice(-2)).join('');\n}\n\nexport class Fb2Parser {\n    xml;\n    body;\n    book;\n    bookExists;\n\n    constructor(xml) {\n         this.xml = xml;\n         this.ordinal = 0;\n    }\n\n    async parseSection(section, parentSectionId) {\n        //  <p>, <image>, <poem>, <subtitle>, <cite>, <empty-line/>, <table>\n\n        const title = section.querySelector('title');\n        const image = section.querySelector('image');\n        const elements = section.querySelectorAll(':scope > *');\n\n        const id = await addSection({parent: parentSectionId, ordinal: this.ordinal++,\n            title: title?.textContent ?? null, image: image?.href ?? null });\n\n        for (const element of elements) {\n            if (element.tagName === 'section') {\n                await this.parseSection(element, id);\n            } else {\n                await addElement({\n                    tag: element.tagName,\n                    content: element.innerHTML,\n                    sectionId: id,\n                    ordinal: this.ordinal++\n                })\n            }\n        }\n    }\n\n    async parseBody() {\n        const bookId = await addBook(this.book);\n\n        // image, title, epigraph, section\n        const body = this.body;\n\n        const title = body.querySelector('title');\n        const image = body.querySelector('image');\n        const sections = body.querySelectorAll(':scope > section');\n\n        const id = await addSection({title: title?.textContent ?? null, image: image?.href ?? null,\n            ordinal: this.ordinal++, parent: bookId });\n        for (const section of sections) {\n            await this.parseSection(section, id);\n        }\n    }\n\n    async parseDescription() {\n        const hash = await window.crypto.subtle.digest(\"SHA-512\", new TextEncoder(\"utf-8\").encode(this.xml));\n        const hashHex = buf2hex(hash);\n\n        const parser = new DOMParser();\n        const doc = parser.parseFromString(this.xml, \"application/xml\");\n        const description = doc.querySelector('description');\n\n        const author = description.querySelector('author first-name').textContent + ' ' +\n            description.querySelector('author last-name').textContent;\n        const title = description.querySelector('book-title');\n\n        let annotation = description.querySelector('annotation');\n        annotation = annotation && annotation.textContent;\n\n        // image\n        let image;\n        const imageInfo = description.querySelector('coverpage image');\n        if (imageInfo) {\n            const imageHref = imageInfo.getAttribute('l:href');\n            if (imageHref && /^#/.test(imageHref)) {\n                const id = imageHref.slice(1);\n                const imageBinary = doc.querySelector(`binary[id=\"${id}\"]`);\n                if (imageBinary) {\n                    const type = imageBinary.getAttribute('content-type');\n                    image = `data:${type};base64,${imageBinary.innerHTML}`;\n                }\n            }\n        }\n\n\n        const book = {hashHex, author: author, title: title.textContent, annotation, image};\n\n        this.body = doc.querySelector('body');\n        this.book = book;\n        this.bookExists = await bookExists(book);\n        return book;\n    }\n\n    get isAlreadyAdded() {\n        return this.bookExists;\n    }\n\n}\n\n","export const DB_READY = 'db-ready';\nexport const BOOK_ALREADY_ADDED = 'book-already-added';\nexport const BOOK_ADDING = 'book-adding';\nexport const BOOK_ADDED = 'book-added';\n\nexport function dispatch(type, detail) {\n    document.dispatchEvent(new CustomEvent(type, { detail }));\n}\n\nexport function on(...types) {\n    return {\n        do (subscription) {\n            types.forEach(type => document.addEventListener(type, subscription));\n        }\n    };\n}\n\n\n","import React from 'react';\r\nimport {Button} from \"react-md\";\r\nimport {Fb2Parser} from \"../fb2Parser\";\r\nimport * as Events from \"../events\";\r\n\r\nexport function BookImporter() {\r\n    const fileInput = React.createRef();\r\n\r\n    function change(event) {\r\n        const file = event.target.files[0];\r\n        const reader = new FileReader();\r\n        reader.addEventListener('load', async event => {\r\n            try {\r\n                const xml = event.target.result;\r\n                const parser = new Fb2Parser(xml);\r\n                const book = await parser.parseDescription();\r\n\r\n                if (parser.isAlreadyAdded) {\r\n                    Events.dispatch(Events.BOOK_ALREADY_ADDED, {book});\r\n                    return;\r\n                }\r\n\r\n                Events.dispatch(Events.BOOK_ADDING, {book});\r\n                await parser.parseBody();\r\n                Events.dispatch(Events.BOOK_ADDED, {book});\r\n            } catch (e) {\r\n                console.error('error when parsing', e);\r\n            }\r\n        });\r\n        reader.readAsText(file);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Button floating primary style={{height: 32, width: 32, padding: 6}} onClick={() => fileInput.current.click()}>add</Button>\r\n            <input type=\"file\" id=\"file-selector\" onChange={change} ref={fileInput}/>\r\n        </div>\r\n    );\r\n\r\n}\r\n","import React, {useEffect, useState} from 'react';\r\nimport {PureComponent} from \"react\";\r\nimport {getAllBooks} from \"../db\";\r\nimport {BookImporter} from \"./BookImporter\";\r\nimport * as Events from \"../events\";\r\nimport {\r\n    Avatar,\r\n    Button,\r\n    Card,\r\n    CardActions,\r\n    CardText,\r\n    CardTitle,\r\n} from 'react-md';\r\nimport './BookList.css';\r\n\r\nexport function BookList(props) {\r\n\r\n    const [books, setBooks] = useState([]);\r\n    const [book, setBook] = useState(null);\r\n\r\n\r\n    Events.on(Events.BOOK_ADDING).do(event => {\r\n        setBook(event.detail.book);\r\n    });\r\n    Events.on(Events.BOOK_ADDED).do(async event => {\r\n        setBook(null);\r\n        setBooks(await getAllBooks());\r\n    });\r\n\r\n\r\n    useEffect(() => {\r\n        (async () => setBooks(await getAllBooks()))();\r\n    }, []);\r\n\r\n\r\n    const readBook = book => props.history.push(`/read/${book.hashHex}`);\r\n\r\n    return (\r\n        <div>\r\n            <BookImporter></BookImporter><br/>\r\n            <div id=\"list\">\r\n                {\r\n                    book &&\r\n                    <Card key={book.title} className=\"loading\">\r\n                        <CardTitle title={book.title}\r\n                                   subtitle={book.author}\r\n                                   avatar={<Avatar src={book.image} role=\"presentation\"/>}\r\n                        />\r\n                        <CardActions expander>\r\n                            <Button flat>\r\n                                <div className=\"lds-dual-ring\"></div>\r\n                            </Button>\r\n                            <Button flat>\r\n                                Loading...\r\n                            </Button>\r\n                        </CardActions>\r\n                        <CardText expandable expanded={true}>\r\n                            {book.annotation}\r\n                        </CardText>\r\n                    </Card>\r\n                }\r\n                {\r\n                    books.map(book =>\r\n                        <Card key={book.title}>\r\n                            <CardTitle\r\n                                title={book.title}\r\n                                subtitle={book.author}\r\n                                avatar={<Avatar src={book.image} role=\"presentation\"/>}\r\n                            />\r\n                            <CardActions expander>\r\n                                <Button flat onClick={() => readBook(book)}>Read</Button>\r\n                                <Button flat>Delete</Button>\r\n                            </CardActions>\r\n                            <CardText expandable>\r\n                                {book.annotation}\r\n                            </CardText>\r\n                        </Card>\r\n                    )\r\n                }</div>\r\n        </div>\r\n    );\r\n}\r\n\r\n","import React from 'react';\r\nimport {PureComponent} from \"react\";\r\nimport {getBook, getRootSection, getSections} from \"../db\";\r\n\r\nexport class Reader extends PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            book: null,\r\n            topSection: null\r\n        };\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const book = await getBook(this.props.match.params.hash);\r\n        const topSection = await getRootSection(book.hashHex);\r\n        this.state.book = book;\r\n        this.state.topSection = topSection;\r\n        this.state.children = await getSections(topSection.id);\r\n        this.forceUpdate();\r\n    }\r\n\r\n    // rendering algo\r\n    // get first non-section element - draw: sections and element\r\n    // get next sibling if there is - draw - intersection observer\r\n    // ..\r\n    // when no next sibling\r\n\r\n    render() {\r\n        const { book, topSection, children } = this.state;\r\n        return (\r\n            <div>\r\n                { book &&\r\n                    <div>\r\n                        <h2>{book.title}</h2>\r\n                        <div  style={{maxWidth: 600}}>\r\n                            <div><img src={book.image} align=\"left\" style={{maxHeight:200, margin: 8}} alt={book.title}/>{book.annotation}</div>\r\n                            <br/>\r\n                            <h3>{topSection.title}</h3>\r\n                        </div>\r\n                    </div>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","/* eslint-disable react/no-array-index-key */\nimport React, {PureComponent} from 'react';\nimport './App.css';\nimport {Button, DialogContainer, FontIcon, NavigationDrawer, Snackbar} from 'react-md';\nimport inboxListItems from './constants/inboxListItems';\nimport {BookList} from './components/BookList';\nimport * as Events from \"./events\";\n\n\nimport {BrowserRouter, Redirect, Route, Switch} from \"react-router-dom\";\n\nimport {createBrowserHistory} from 'history';\nimport {Reader} from \"./components/Reader\";\n\n// создаём кастомную историю\nconst history = createBrowserHistory();\n\nexport default class App extends PureComponent {\n    constructor() {\n        super();\n\n        // Update the items so they have an onClick handler to change the current page\n        this.navItems = inboxListItems.map((item) => {\n            if (item.divider) {\n                return item;\n            }\n\n            return {\n                ...item,\n                onClick: () => this.setPage(item.key, item.primaryText),\n            };\n        });\n\n        this.state = {\n            toasts: [],\n            renderNode: null,\n            visible: true,\n            key: inboxListItems[0].key,\n            page: inboxListItems[0].primaryText,\n        };\n\n        Events.on(Events.BOOK_ALREADY_ADDED).do(event => {\n            const book = event.detail.book;\n            debugger\n            this.addToast(`Book \"${book.title.toUpperCase()}\" has been added earlier!`);\n        });\n    }\n\n    addToast = (text, action, autohide = true) => {\n        this.setState((state) => {\n            const toasts = state.toasts.slice();\n            toasts.push({text, action});\n            return {toasts, autohide};\n        });\n    }\n\n    dismissToast = () => {\n        const [, ...toasts] = this.state.toasts;\n        this.setState({toasts});\n    };\n\n    setPage = (key, page) => {\n        this.navItems = this.navItems.map((item) => {\n            if (item.divider) {\n                return item;\n            }\n\n            return {...item, active: item.key === key};\n        });\n\n        this.setState({key, page});\n    };\n\n    hide = () => {\n        this.setState({visible: false, renderNode: null});\n    };\n\n    handleShow = () => {\n        this.setState({renderNode: document.getElementById('navigation-drawer-demo')});\n    };\n\n    render() {\n        const {visible, renderNode, toasts} = this.state;\n        return (\n            <BrowserRouter history={history} basename={'/fb2-reader'}>\n                <div>\n                    <DialogContainer\n                        id=\"navigation-drawer-demo\"\n                        aria-label=\"Navigation Drawer Demo\"\n                        visible={visible}\n                        fullPage\n                        focusOnMount={false}\n                        onShow={this.handleShow}\n                        onHide={this.hide}>\n                        <NavigationDrawer\n                            renderNode={renderNode}\n                            navItems={this.navItems}\n                            mobileDrawerType={NavigationDrawer.DrawerTypes.TEMPORARY_MINI}\n                            tabletDrawerType={NavigationDrawer.DrawerTypes.PERSISTENT_MINI}\n                            desktopDrawerType={NavigationDrawer.DrawerTypes.PERSISTENT_MINI}\n                            toolbarTitle=\"FB2 Reader\"\n                            toolbarActions={<Button icon onClick={this.hide}>close</Button>}\n                            contentId=\"main-demo-content\"\n                            temporaryIcon={<FontIcon>menu</FontIcon>}\n                            persistentIcon={<FontIcon>arrow_back</FontIcon>}\n                            contentClassName=\"md-grid\">\n\n                            <Switch>\n                                <Route path='/books' component={BookList}/>\n                                <Route path='/read/:hash' component={Reader}/>\n                                <Redirect from='/' to='/books'/>\n                            </Switch>\n\n                        </NavigationDrawer>\n                        <Snackbar\n                            id=\"example-snackbar\"\n                            toasts={toasts}\n                            autohide={true}\n                            onDismiss={this.dismissToast}\n                            autohideTimeout={4000}\n                        />\n                    </DialogContainer>\n                </div>\n            </BrowserRouter>\n        );\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport WebFontLoader from 'webfontloader';\n\nWebFontLoader.load({\n    google: {\n        families: ['Roboto:300,400,500,700', 'Material Icons'],\n    },\n});\n\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}